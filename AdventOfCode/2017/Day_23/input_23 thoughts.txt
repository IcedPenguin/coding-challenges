Original Set of Instructions. Goal, determine an optimization so it will
complete in a reasonable amount of time.

    set b 79
    set c b
    jnz a 2
    jnz 1 5
    mul b 100
    sub b -100000
    set c b
    sub c -17000
    set f 1
    set d 2
    set e 2
    set g d
    mul g e
    sub g b
    jnz g 2
    set f 0
    sub e -1
    set g e
    sub g b
    jnz g -8
    sub d -1
    set g d
    sub g b
    jnz g -13
    jnz f 2
    sub h -1
    set g b
    sub g c
    jnz g 2
    jnz 1 3
    sub b -17
    jnz 1 -23


========================================================================

Find spots where we are jumping backwards. Tab in the whole block for
the jump under the assumption this is part of a control flow structure.

I also noticed the exit instruction.

    set b 79
    set c b
    jnz a 2
    jnz 1 5
    mul b 100
    sub b -100000
    set c b
    sub c -17000
        set f 1
        set d 2
            set e 2
                set g d
                mul g e
                sub g b
                jnz g 2
                set f 0
                sub e -1
                set g e
                sub g b
                jnz g -8    <-- Jump back 8 instructions.
            sub d -1
            set g d
            sub g b
            jnz g -13       <-- Jump back 13 instructions
        jnz f 2
        sub h -1
        set g b
        sub g c
        jnz g 2
        jnz 1 3             <-- This is the exit instruction.
        sub b -17
        jnz 1 -23           <-- Jump back 23 instructions


========================================================================

Convert a bunch of instructions to assignment statements for readibilty.

Added the initial set of setting a to 1. This led me to findng what looks 
like an if block. This block explains why debug mode (A=0) runs so much 
faster that non-debug (A=1).

    a = 1
    b = 79          ;set b 79
    c = b           ;set c b
    <-- START IF -->
    jnz a 2
    jnz 1 5     
    b *= 100        ;mul b 100
    b -= -100000    ;sub b -100000
    c = b           ;set c b
    c -= -17000     ;sub c -17000
    <-- END IF -->
        f = 1           ;set f 1
        d = 2           ;set d 2
            e = 2           ;set e 2
                g = d           ;set g d
                g *= e          ;mul g e
                g -= b          ;sub g b
                <-- START IF -->
                jnz g 2
                f = 0           ;set f 0
                <-- END IF -->
                e += 1          ;sub e -1
                g = e           ;set g e
                g -= b          ;sub g b
                jnz g -8    <-- Jump back 8 instructions.
            sub d -1
            set g d
            sub g b
            jnz g -13       <-- Jump back 13 instructions
        jnz f 2
        sub h -1
        set g b
        sub g c
        jnz g 2
        jnz 1 3             <-- This is the exit instruction.
        sub b -17
        jnz 1 -23           <-- Jump back 23 instructions


========================================================================

All instructions have been converted. A few more if blocks were identified.
Looks like three while loops.

    a = 1
    b = 79
    c = b
    if(a != 0){
        b = b * 100 + 100000
        c = b + 17000
    }
    do {
        f = 1
        d = 2
        do {
            e = 2
            do{
                g = d * e - b
                if(g == 0){
                    f = 0
                }
                e += 1
                g = e
                g -= b
            } while(g != 0)
            
            d += 1
            g = d
            g -= b
        } while(g != 0)
        if(f==0){
            h += 1
        }
        g = b
        g -= c
        if(g == 0){
            exit()
        }
        b += 17
    } while(true)

========================================================================

Simplify some of the numberic work where all the values are known. The 
two while loop with conditions, could they be rewritten as for loops
for readilitiy?

    a = 1
    b = 79
    c = 79
    if(a != 0){
        b = 107900
        c = 124900
    }
    do {
        f = 1
        d = 2
        do {
            e = 2
            do{
                g = d * e - b
                if(g == 0){
                    f = 0
                }
                e += 1
                g = e
                g -= b
            } while(g != 0)
            
            d += 1
            g = d
            g -= b
        } while(g != 0)
        if(f==0){
            h += 1
        }
        g = b           ; g is set to be,
        g -= c          ; and then modified by c
        if(g == 0){     ; if that modification results in zero exit.
            exit()
        }
        b += 17         ; b only mutates here.... we have all the parts of a for loop
    } while(true)

========================================================================

Extract some for loops
    a = 1
    b = 79
    c = 79
    if(a != 0){
        b = 107900
        c = 124900
    }
    for(; b < c; b += 17){
        f = 1
        for(d=2; d <= b; d++){
            for(e=2; e <= b; e++){
                g = d * e - b  ; are two numbers mutliplied together equal to "b"?
                if(g == 0){
                    f = 0
                }
            }            
        }

        if(f==0){
            h += 1
        }
    }




Optimization Thoughts
    1)  On line 11. Instead of "set e = 2", change to "set e = d". We are testing pairs
        of number for even divisibilty of the target number. No sense in testing the
        same pair twice.

    2)  Once we have found a condition where there is a pair of numbers that event divides
        the target, we can exit the loop. No sense in testing the rest of the possibilties.
        Adding a line, necessitates upping the jump value for following jump backward 
        statements. Add the instruction, "e = b"

    3)  Effectively, if the number "b" can be factored, we increment a counter. The application
        is counting the number of composite numbers between two different values.

    --- The above optimizations still end up taking too long.

    4)  Optimization 4, don't bother optimizing. Simply count all the composite numbers 
        in the desired range in Python. Skip the interpreter completely.
